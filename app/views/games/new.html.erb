<% content_for(:title, '計測画面') %>
  <div class= "container">
    <div class="row">
      <div class="col-md-6 offset-md-3">
        <h1 class="wf-roundedmplus1c">遊び方</h1>
        <div class= "explanation" id="explanation">
          <p class="wf-roundedmplus1c">
            人が聞いていて聴きやすいと感じる話し方の<br>
            速度は、1秒間に5文字といわれています。<br>
            あなたの話す速さと理想の速さにどのくらい<br>
            ズレがあるのか測定を行います。<br>
            STARTボタンを押して話しかけてください。<br>
            終わったらSTOPボタンを押してください。<br>
            結果画面に切り替わります。<br>
          </p> 
        </div>
        <div class="d-flex flex-column bd-highlight mb-3"> 
          <%= image_tag 'audio_hakei.jpeg', class: 'audio_hakei' %>
          <div class="d-flex justify-content-center">
          <button class="btn btn-danger " id="start_btn">START</button>
          <button class="btn btn-danger " id="stop_btn">STOP</button>
          </div>
          <input class="form-control" id="counter" name="counter" type="text" value="00:00:00:00">
        </div>
        <p id="sampletext" class="wf-roundedmplus1c"><font size="1" color="white">
        <話すことが思いつかない方向け>むかしむかしあるところに、おじいさんとおばあさんが住んでいました。
        おじいさんは山へしばかりに、おばあさんは川へせんたくに行きました。
        おばあさんが川でせんたくをしていると、ドンブラコ、ドンブラコと、大きな桃が流れて
        きました。「おや、これは良いおみやげになるわ」
        おばあさんは大きな桃をひろいあげて、家に持ち帰りました。
        そして、おじいさんとおばあさんが桃を食べようと桃を切ってみると、なんと中から元気
        の良い赤ちゃんが飛び出してきました。
        「これはきっと、神さまがくださったにちがいない」
        子どものいなかったおじいさんとおばあさんは、大喜びです。
        桃から生まれた男の子を、おじいさんとおばあさんは桃太郎と名付けました。
        </font></p>
      </div>
    </div>
  </div>
  
  <script>

    const speech = new webkitSpeechRecognition();
    speech.continuous = true;
    speech.interimResults = true;
    speech.lang = 'ja-JP';

    const start_btn = document.getElementById('start_btn');
    const stop_btn = document.getElementById('stop_btn');
    
    start_btn.onclick = function() {
      //音声認識を開始
      speech.start();
      s_time = new Date();
    }
       
    stop_btn.onclick = function() {
      //音声認識を完了
      speech.stop();
      var e_time = new Date();
      var diff = e_time.getTime() - s_time.getTime();
      var talking_time = diff / 1000;
      console.log("経過時間(秒):", talking_time);
      //音声認識の結果を返す
      speech.onresult = function (e) {
        if (e.results[0].isFinal) {
          var autotext = e.results[0][0].transcript
          console.log("発した文字", autotext)
          var data = {
            //gooラボ ひらがな化API
            app_id: 'a5e4e8dd5686de7743b620c720e89beca5e5a5dca31ed4a74b7b6efddf5cebc1',
            sentence: autotext,
            output_type: "hiragana",
            
            //yahoo ルビ振りAPI
            /*id: "1234-2",
            jsonrpc: "2.0",
            method: "jlp.furiganaservice.furigana",
            params: {
              q: "漢字",
              grade: 1
            }*/
          };
          
          jsonEncoded = JSON.stringify(data);
          console.log(jsonEncoded);
          
          $.ajax ( {
            type: "POST",
            url: "https://labs.goo.ne.jp/api/hiragana",
            contentType: "application/json",
            data: jsonEncoded,
          } )
          .done(function(data) {
            console.log("発した文字(ひらがな):", data.converted);
            var word_count = data.converted.replace(/\s+/g,'').length;
            console.log("発した文字数:", word_count);
            var fast_talking_score = word_count/talking_time;
            console.log("1秒あたりの文字数", fast_talking_score);
         
            $.ajax({
              url: '/games/new',  
              type: 'GET',
              dataType: 'json',
              async: true,
              data: {
                fast_talking_score: fast_talking_score,
              },
            });
            location.href = '/games/result?' + fast_talking_score + "," + word_count + "," + talking_time;
          })
        }
      }
    }
    
    //ストップウォッチ機能
    $(function(){
      reset_timer();
    
      var timer;
      var timerID;
      var timerFlag = 0;	// 0:停止 1:動作
    
      
      $("#start_btn").on("click", function(){
        start_count();
      });

      $("#stop_btn").on("click", function(){
        stop_count();
      });
   
      function reset_timer() {
        if(timerFlag === 1){
          stop_count();
        }
        timer = 0; 
        $("#counter").val("00:00:00:00");
      }
    
  
      function start_count() { 					
        $("#start_btn").val("stop");
        timerFlag = 1;
        timerID = setInterval(count_up, 10); 
      }
    

      function stop_count() { 					
        $("#stop_btn").val("start");
        timerFlag = 0;
        clearInterval(timerID);
      }
    
  
      function count_up() {
        ++timer;
        var formatTimer = counter_format(timer);
        $("#counter").val(formatTimer);
      }
    
      function counter_format(num) {
        var numZan = num;	// 残りの時間(10ミリ秒単位)
        var hh = Math.floor(numZan / (100 * 60 * 60));
        numZan = numZan - (hh * 100 * 60 * 60);
        var mm = Math.floor(numZan / (100 * 60));
        numZan = numZan -(mm * 100 * 60);
        var ss = Math.floor(numZan / 100);
        numZan = numZan - (ss * 100);
        var ms = numZan;
        
        if(hh < 10){hh = "0" + hh;}
        if(mm < 10){mm = "0" + mm;}
        if(ss < 10){ss = "0" + ss;}
        if(ms < 10){ms = "0" + ms;}
        return hh + ":" + mm + ":" + ss + ":" + ms;
      }
    });
  
  </script>